import { Row, Col, Form, Button, Modal } from "react-bootstrap";
import ListGroup from "react-bootstrap/ListGroup";
import React, { useState } from "react";
import ContentPasteSearchSharpIcon from "@mui/icons-material/ContentPasteSearchSharp";
import FmdBadSharpIcon from "@mui/icons-material/FmdBadSharp";
import QuestionAnswerSharpIcon from "@mui/icons-material/QuestionAnswerSharp";
import CarCrashSharpIcon from "@mui/icons-material/CarCrashSharp";
import PendingActionsSharpIcon from "@mui/icons-material/PendingActionsSharp";
import EmojiTransportationSharpIcon from "@mui/icons-material/EmojiTransportationSharp";
import PersonRemoveSharpIcon from "@mui/icons-material/PersonRemoveSharp";
import PersonAddSharpIcon from "@mui/icons-material/PersonAddSharp";
import DirectionsBusSharpIcon from "@mui/icons-material/DirectionsBusSharp";
import FormatColorFillSharpIcon from "@mui/icons-material/FormatColorFillSharp";
import FmdGoodSharpIcon from "@mui/icons-material/FmdGoodSharp";
import PinSharpIcon from "@mui/icons-material/PinSharp";
import LivingSharpIcon from "@mui/icons-material/LivingSharp";
import StartSharpIcon from "@mui/icons-material/StartSharp";
import CancelScheduleSendSharpIcon from "@mui/icons-material/CancelScheduleSendSharp";
import SendSharpIcon from "@mui/icons-material/SendSharp";
import axios from "axios";

const VehicleRequest = () => {
  const [toggle, setToggle] = useState(true);
  const [from, setFromDate] = useState("");
  const [to, setToDate] = useState("");
  const [purpose, setPurpose] = useState("");
  const [destination, setDestination] = useState("");
  const [plateNumber, setPlateNumber] = useState("");
  const [validated, setValidated] = useState(false);
  const [vehicles, setVehicles] = useState([]);
  const [selectedVehicle, setSelectedVehicle] = useState(null);
  const [showVehicleSelectionModal, setShowVehicleSelectionModal] =
    useState(false);

  const handleSubmit = async (event) => {
    event.preventDefault();
    const form = event.currentTarget;
    if (form.checkValidity() === false) {
      event.stopPropagation();
    } else {
      try {
        const response = await axios.get(
          "/VehicleRecord?select=unavailable,maxPerson,maxLoad,plateNumber,_id&isDeleted=false"
        );
        setVehicles(response.data?.data);
        setShowVehicleSelectionModal(true);
      } catch (error) {
        console.error(error);
      }
    }
    setValidated(true);
  };

  const handleVehicleSelection = (vehicle) => {
    setSelectedVehicle(vehicle);
    setShowVehicleSelectionModal(false);
  };

  const handleRequestSubmit = async () => {
    try {
      await axios.post("/request/vehicle", {
        from,
        to,
        purpose,
        destination,
        vehicle: selectedVehicle._id,
      });
      alert("Vehicle request submitted successfully!");
    } catch (error) {
      console.error(error);
      alert(
        "An error occurred while submitting the vehicle request. Please try again later."
      );
    }
  };

  return (
    <div className="view">
      <div className="sidebar">
        <div class="d-grid">
          <button
            onClick={() => setToggle(!toggle)}
            class="btn btn btn-outline-secondary mb-5"
          >
            Menu
          </button>
        </div>
        <hr></hr>
        {!toggle && (
          <ListGroup>
            <ListGroup.Item action href="/employee/RequestPermission">
              <ContentPasteSearchSharpIcon color="primary" />
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/makeCoplain">
              <FmdBadSharpIcon color="primary" />
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/receiveResponse">
              <QuestionAnswerSharpIcon color="primary" />
            </ListGroup.Item>
            <ListGroup.Item action active href="/employee/requestVehicle">
              <CarCrashSharpIcon color="white" />
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/viewSchedule">
              <PendingActionsSharpIcon color="primary" />
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/receiveVehicle">
              <EmojiTransportationSharpIcon color="primary" />
            </ListGroup.Item>
          </ListGroup>
        )}

        {toggle && (
          <ListGroup>
            <ListGroup.Item action href="/employee/RequestPermission">
              <ContentPasteSearchSharpIcon color="primary" />
              <span> </span>
              Request Permission
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/makeCoplain">
              <FmdBadSharpIcon color="primary" />
              <span> </span>
              Make complain
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/receiveResponse">
              <QuestionAnswerSharpIcon color="primary" />
              <span> </span>
              Receive response
            </ListGroup.Item>
            <ListGroup.Item action active href="/employee/requestVehicle">
              <CarCrashSharpIcon color="white" />
              <span> </span>
              Request vehicle
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/viewSchedule">
              <PendingActionsSharpIcon color="primary" />
              <span> </span>
              View schedule
            </ListGroup.Item>
            <ListGroup.Item action href="/employee/receiveVehicle">
              <EmojiTransportationSharpIcon color="primary" />
              <span> </span>
              Receive Vehicle
            </ListGroup.Item>
          </ListGroup>
        )}
        <div className="field">
          <div className="App">
            {" "}
            <Form noValidate validated={validated} onSubmit={handleSubmit}>
              <Row className="mb-3">
                <Form.Group as={Col}>
                  <Form.Label>From</Form.Label>
                  <Form.Control
                    type="datetime-local"
                    required
                    value={from}
                    onChange={(event) => setFromDate(event.target.value)}
                  />
                  <Form.Control.Feedback type="invalid">
                    Please enter a valid date range.
                  </Form.Control.Feedback>
                </Form.Group>
                <Form.Group as={Col} md="6" controlId="validationCustom02">
                  <Form.Label>To Date</Form.Label>
                  <Form.Control
                    required
                    type="date"
                    value={to}
                    onChange={(e) => setToDate(e.target.value)}
                  />
                  <Form.Control.Feedback type="invalid">
                    Please provide a valid date range.
                  </Form.Control.Feedback>
                </Form.Group>
              </Row>
              <Row className="mb-3">
                <Form.Group as={Col} md="6" controlId="validationCustom03">
                  <Form.Label>Number of Passengers</Form.Label>
                  <Form.Control type="number" min="1" />
                </Form.Group>
              </Row>
              <Row className="mb-3">
                <Form.Group as={Col} md="12" controlId="validationCustom05">
                  <Form.Label>Pick-up Location</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Enter pick-up location"
                    // required
                  />
                </Form.Group>
              </Row>
              <Row className="mb-3">
                <Form.Group as={Col} md="12" controlId="validationCustom07">
                  <Form.Label>Purpose</Form.Label>
                  <Form.Control as="textarea" rows={3} />
                </Form.Group>
              </Row>
              <Button
                type="submit"
                onClick={() => setShowVehicleSelectionModal(true)}
              >
                Next
              </Button>
              <Modal
                show={showVehicleSelectionModal}
                onHide={() => setShowVehicleSelectionModal(false)}
              >
                <Modal.Header closeButton>
                  <Modal.Title>Select a Vehicle</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                  <ListGroup>
                    {vehicles.length > 0 &&
                      vehicles.map((vehicle) => (
                        <ListGroup.Item
                          key={vehicle._id}
                          onClick={() => setSelectedVehicle(vehicle)}
                        >
                          <p>Plate Number {vehicle.plateNumber}</p>
                          <p>Max Person {vehicle.maxPerson}</p>
                          <p>Max Load {vehicle.maxLoad}</p>
                        </ListGroup.Item>
                      ))}
                  </ListGroup>
                </Modal.Body>
                <Modal.Footer>
                  <Button onClick={() => setShowVehicleSelectionModal(false)}>
                    Cancel
                  </Button>
                  <Button
                    onClick={() => setShowVehicleSelectionModal(false)}
                    disabled={!selectedVehicle}
                  >
                    Request Vehicle
                  </Button>
                </Modal.Footer>
              </Modal>
            </Form>
          </div>
        </div>
      </div>
    </div>
  );
};
export default VehicleRequest;
